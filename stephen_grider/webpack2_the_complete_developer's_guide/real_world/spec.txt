1. 使用 yarn 安裝相依的 library

2. 在 webpack.config.js 設定 babel
   排除 node_modules，因為裡面的 library 已經被轉換為 ES5，所以不要浪費資源

3. babel-preset-env ===> ES6 ES7 TO ES5，但不知道怎麼轉換 JSX
   babel-preset-react ===> JSX TO ES5

4. 使用 yarn run build 來產生 bundle.js 和 vendor.js
   如何最小化 bundle.js 

webpack.optimize.CommonsChunkPlugin

HtmlWebpackPlugin

***
 vendor.js 是要放不常變更的 lib，因為要利用 browser 的快取

5. 如果 js 的 name 沒有改變的話，就會被 cache，browser 自動 cache
   所以可以用 hashcode 解

6. 如果檔案有變更的話，每 build 一次，就會在 dist 目錄下，產生檔案
   好像會越來越多

7. rimraf ===> 可以跨平台執行 command

8. webpack-dev-server [only for development][ 不會產生實體檔案，直接寫到記憶體中 ] 史上無敵快💪
   如果變更 webpack.config.js 要重新啟動 webpack-dev-server


9. development-based or production-based
   -p ===> production 壓縮檔案

   development env ===>  透過 webpackMiddleware 找到存在記憶體中的 assets 

   ** 設定為 production 的執行環境 **
      NODE_ENV=production node server.js

